Index: Assets/Scripts/BrickField/Bricks/BrickYellow.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing Unity.VisualScripting;\nusing UnityEngine;\nusing Color = UnityEngine.Color;\nusing Object = UnityEngine.Object;\n\nnamespace Bricks\n{\n    public class BrickYellow : Brick\n    {\n        public GameManager gm;\n        private static string _myString = \"BrickYellow\";\n        //public ParticleSystem explosionParticle;\n\n        private void Awake()\n        {\n            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();\n            this.color = new Color(.7f, .7f, 0);\n        }\n\n        /*\n        public new void Start()\n        {\n            //this.color = myGameRound < 2 ? new Color(.7f, .7f, 0) : new Color(0f, .8f, .5f);\n        }\n        */\n        \n        public override void OnCollisionEnter2D(Collision2D collision)\n        {\n            if (collision.gameObject.GetComponent<Ball>())\n            {\n                int myRowtemp = this.myRow;\n                int myColtemp = this.myCol;\n                Destroy(this.gameObject);\n                gm.BrickCollision(_myString, myRowtemp, myColtemp);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/BrickField/Bricks/BrickYellow.cs b/Assets/Scripts/BrickField/Bricks/BrickYellow.cs
--- a/Assets/Scripts/BrickField/Bricks/BrickYellow.cs	(revision 88bc4fb157b68d3d2a281b3353bf6a421655fce8)
+++ b/Assets/Scripts/BrickField/Bricks/BrickYellow.cs	(date 1722715144839)
@@ -4,30 +4,25 @@
 using System.Drawing;
 using Unity.VisualScripting;
 using UnityEngine;
+using UnityEngine.Serialization;
+using UnityEngine.UIElements;
 using Color = UnityEngine.Color;
 using Object = UnityEngine.Object;
 
 namespace Bricks
 {
-    public class BrickYellow : Brick
+    public class BrickGreen : Brick
     {
-        public GameManager gm;
         private static string _myString = "BrickYellow";
+
+
         //public ParticleSystem explosionParticle;
 
-        private void Awake()
-        {
-            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();
-            this.color = new Color(.7f, .7f, 0);
-        }
-
-        /*
-        public new void Start()
+        public void Awake()
         {
-            //this.color = myGameRound < 2 ? new Color(.7f, .7f, 0) : new Color(0f, .8f, .5f);
+            this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.5f, 0f, .5f);
         }
-        */
-        
+
         public override void OnCollisionEnter2D(Collision2D collision)
         {
             if (collision.gameObject.GetComponent<Ball>())
@@ -35,8 +30,8 @@
                 int myRowtemp = this.myRow;
                 int myColtemp = this.myCol;
                 Destroy(this.gameObject);
-                gm.BrickCollision(_myString, myRowtemp, myColtemp);
+                bi.BrickCollision(_myString, myRowtemp, myColtemp);
             }
         }
     }
-}
+}
\ No newline at end of file
Index: Assets/Scripts/BrickField/Bricks/BrickOrange.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing Unity.VisualScripting;\nusing UnityEngine;\nusing Color = UnityEngine.Color;\nusing Object = UnityEngine.Object;\n\nnamespace Bricks\n{\n    public class BrickOrange : Brick\n    {\n        public GameManager gm;\n        private static string _myString = \"BrickOrange\";\n\n        public void Awake()\n        {\n            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();\n            this.color = new Color(.8f, .5f, 0);\n        }\n        \n        /*\n        public new void Start()\n        {\n            //this.color = myGameRound < 2 ? new Color(.8f, .5f, 0) : new Color(1f, .5f, 1f);\n        }\n        */\n\n        public override void OnCollisionEnter2D(Collision2D collision)\n        {\n            if (collision.gameObject.GetComponent<Ball>())\n            {\n                int myRowtemp = this.myRow;\n                int myColtemp = this.myCol;\n                Destroy(this.gameObject);\n                gm.BrickCollision(_myString, myRowtemp, myColtemp);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/BrickField/Bricks/BrickOrange.cs b/Assets/Scripts/BrickField/Bricks/BrickOrange.cs
--- a/Assets/Scripts/BrickField/Bricks/BrickOrange.cs	(revision 88bc4fb157b68d3d2a281b3353bf6a421655fce8)
+++ b/Assets/Scripts/BrickField/Bricks/BrickOrange.cs	(date 1722715144843)
@@ -4,28 +4,24 @@
 using System.Drawing;
 using Unity.VisualScripting;
 using UnityEngine;
+using UnityEngine.Serialization;
+using UnityEngine.UIElements;
 using Color = UnityEngine.Color;
 using Object = UnityEngine.Object;
 
 namespace Bricks
 {
-    public class BrickOrange : Brick
+    public class BrickGreen : Brick
     {
-        public GameManager gm;
         private static string _myString = "BrickOrange";
 
+
+        //public ParticleSystem explosionParticle;
+
         public void Awake()
         {
-            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();
-            this.color = new Color(.8f, .5f, 0);
+            this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.5f, 0f, .5f);
         }
-        
-        /*
-        public new void Start()
-        {
-            //this.color = myGameRound < 2 ? new Color(.8f, .5f, 0) : new Color(1f, .5f, 1f);
-        }
-        */
 
         public override void OnCollisionEnter2D(Collision2D collision)
         {
@@ -34,8 +30,8 @@
                 int myRowtemp = this.myRow;
                 int myColtemp = this.myCol;
                 Destroy(this.gameObject);
-                gm.BrickCollision(_myString, myRowtemp, myColtemp);
+                bi.BrickCollision(_myString, myRowtemp, myColtemp);
             }
         }
     }
-}
+}
\ No newline at end of file
Index: Assets/Scripts/BrickField/Bricks/BrickGreen.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing Unity.VisualScripting;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing Color = UnityEngine.Color;\nusing Object = UnityEngine.Object;\n\nnamespace Bricks\n{\n    public class BrickGreen : Brick\n    {\n        public GameManager gm;\n        private static string _myString = \"BrickGreen\";\n        //public float myheight;\n\n        public void Awake()\n        {\n            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();\n            //this.color = new Color(0f, .5f, 0f);\n            this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.6f, 0f, .5f);\n            //myheight = this.transform.position.y;\n        }\n\n        \n        //public new void Start()\n        //{\n        //this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.5f, 0f, .5f);\n        //}\n        \n\npublic override void OnCollisionEnter2D(Collision2D collision)\n{\nif (collision.gameObject.GetComponent<Ball>())\n{\nint myRowtemp = this.myRow;\nint myColtemp = this.myCol;\nDestroy(this.gameObject);\ngm.BrickCollision(_myString, myRowtemp, myColtemp);\n}\n}\n}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/BrickField/Bricks/BrickGreen.cs b/Assets/Scripts/BrickField/Bricks/BrickGreen.cs
--- a/Assets/Scripts/BrickField/Bricks/BrickGreen.cs	(revision 88bc4fb157b68d3d2a281b3353bf6a421655fce8)
+++ b/Assets/Scripts/BrickField/Bricks/BrickGreen.cs	(date 1722715144851)
@@ -4,6 +4,7 @@
 using System.Drawing;
 using Unity.VisualScripting;
 using UnityEngine;
+using UnityEngine.Serialization;
 using UnityEngine.UIElements;
 using Color = UnityEngine.Color;
 using Object = UnityEngine.Object;
@@ -12,34 +13,17 @@
 {
     public class BrickGreen : Brick
     {
-        public GameManager gm;
         private static string _myString = "BrickGreen";
-        //public float myheight;
+
+
+        //public ParticleSystem explosionParticle;
 
         public void Awake()
         {
-            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();
-            //this.color = new Color(0f, .5f, 0f);
-            this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.6f, 0f, .5f);
-            //myheight = this.transform.position.y;
         }
-
-        
-        //public new void Start()
-        //{
-        //this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.5f, 0f, .5f);
-        //}
-        
 
-public override void OnCollisionEnter2D(Collision2D collision)
-{
-if (collision.gameObject.GetComponent<Ball>())
-{
-int myRowtemp = this.myRow;
-int myColtemp = this.myCol;
-Destroy(this.gameObject);
-gm.BrickCollision(_myString, myRowtemp, myColtemp);
-}
-}
-}
-}
+        public override void OnCollisionEnter2D(Collision2D collision)
+        {
+        }
+    }
+}
\ No newline at end of file
Index: Assets/Scripts/BrickField/Bricks/BrickRed.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing Unity.VisualScripting;\nusing UnityEngine;\nusing Color = UnityEngine.Color;\nusing Object = UnityEngine.Object;\n\nnamespace Bricks\n{\n    public class BrickRed : Brick\n    {\n        public GameManager gm;\n        private static string _myString = \"BrickRed\";\n\n        private void Awake()\n        {\n            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();\n            this.color = new Color(.7f, .2f, .2f);\n        }\n\n        /*\n        public new void Start()\n        {\n            //this.color = myGameRound < 2 ? new Color(.7f, .2f, .2f) : new Color(0f, .5f, 1f);\n        }\n        */\n        \n        public override void OnCollisionEnter2D(Collision2D collision)\n        {\n            if (collision.gameObject.GetComponent<Ball>())\n            {\n                int myRowtemp = this.myRow;\n                int myColtemp = this.myCol;\n                Destroy(this.gameObject);\n                gm.BrickCollision(_myString, myRowtemp, myColtemp);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/BrickField/Bricks/BrickRed.cs b/Assets/Scripts/BrickField/Bricks/BrickRed.cs
--- a/Assets/Scripts/BrickField/Bricks/BrickRed.cs	(revision 88bc4fb157b68d3d2a281b3353bf6a421655fce8)
+++ b/Assets/Scripts/BrickField/Bricks/BrickRed.cs	(date 1722715144835)
@@ -4,29 +4,25 @@
 using System.Drawing;
 using Unity.VisualScripting;
 using UnityEngine;
+using UnityEngine.Serialization;
+using UnityEngine.UIElements;
 using Color = UnityEngine.Color;
 using Object = UnityEngine.Object;
 
 namespace Bricks
 {
-    public class BrickRed : Brick
+    public class BrickGreen : Brick
     {
-        public GameManager gm;
         private static string _myString = "BrickRed";
 
-        private void Awake()
-        {
-            gm = transform.parent.parent.gameObject.GetComponent<GameManager>();
-            this.color = new Color(.7f, .2f, .2f);
-        }
+
+        //public ParticleSystem explosionParticle;
 
-        /*
-        public new void Start()
+        public void Awake()
         {
-            //this.color = myGameRound < 2 ? new Color(.7f, .2f, .2f) : new Color(0f, .5f, 1f);
+            this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.5f, 0f, .5f);
         }
-        */
-        
+
         public override void OnCollisionEnter2D(Collision2D collision)
         {
             if (collision.gameObject.GetComponent<Ball>())
@@ -34,8 +30,8 @@
                 int myRowtemp = this.myRow;
                 int myColtemp = this.myCol;
                 Destroy(this.gameObject);
-                gm.BrickCollision(_myString, myRowtemp, myColtemp);
+                bi.BrickCollision(_myString, myRowtemp, myColtemp);
             }
         }
     }
-}
+}
\ No newline at end of file
Index: Assets/Scripts/BrickField/Bricks/Brick.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Unity.VisualScripting;\nusing UnityEngine;\n\npublic abstract class Brick : MonoBehaviour\n{\n    protected SpriteRenderer sprite_renderer;\n    protected Color color;\n    protected int pointValue;\n    protected int myRow;\n    protected int myCol;\n    protected int myGameRound;\n    protected Vector2 myPosition;\n    \n    protected void Start()\n    {\n        sprite_renderer = GetComponent<SpriteRenderer>();\n        sprite_renderer.color = this.color;\n    }\n    \n    /*\n    public void Set_Color(string row)\n    {\n            \n        this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.6f, 0f, .5f);\n        this.color = myGameRound < 2 ? new Color(.8f, .5f, 0) : new Color(1f, .5f, 1f);\n        this.color = myGameRound < 2 ? new Color(.7f, .2f, .2f) : new Color(0f, .5f, 1f);\n        this.color = myGameRound < 2 ? new Color(.7f, .7f, 0) : new Color(0f, .8f, .5f);\n    }\n    */\n    \n    public void Set_Row(int row)\n    /*writes to brick object its position relative to other bricks vertically 0-7*/\n    {\n        this.myRow = row;\n    }\n    \n    public void Set_GameRound(int gameRound)\n        /*writes to brick object its position relative to other bricks vertically 0-7*/\n    {\n        this.myGameRound = gameRound;\n    }\n\n    public void Set_Column(int col)\n    /*writes to brick object its position relative to other bricks horizontally 0-13*/\n    {\n        this.myCol = col;\n    }\n\n    public abstract void OnCollisionEnter2D(Collision2D collision);\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/BrickField/Bricks/Brick.cs b/Assets/Scripts/BrickField/Bricks/Brick.cs
--- a/Assets/Scripts/BrickField/Bricks/Brick.cs	(revision 88bc4fb157b68d3d2a281b3353bf6a421655fce8)
+++ b/Assets/Scripts/BrickField/Bricks/Brick.cs	(date 1722715181172)
@@ -4,32 +4,52 @@
 using Unity.VisualScripting;
 using UnityEngine;
 
-public abstract class Brick : MonoBehaviour
+public class Brick: MonoBehaviour
 {
+    protected BreakoutInstance bi;
     protected SpriteRenderer sprite_renderer;
     protected Color color;
-    protected int pointValue;
     protected int myRow;
     protected int myCol;
     protected int myGameRound;
-    protected Vector2 myPosition;
+    protected Vector2 MyPosition;
+    private static string _myString;
     
+    protected void Awake()
+    {
+        bi = transform.parent.parent.gameObject.GetComponent<BreakoutInstance>();
+    }
     protected void Start()
     {
         sprite_renderer = GetComponent<SpriteRenderer>();
         sprite_renderer.color = this.color;
     }
     
-    /*
-    public void Set_Color(string row)
+    public void Set_Color(string rowColor)
+    /*Cannot determine how to case "String" as a getter string from bi*/
     {
-            
-        this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.6f, 0f, .5f);
-        this.color = myGameRound < 2 ? new Color(.8f, .5f, 0) : new Color(1f, .5f, 1f);
-        this.color = myGameRound < 2 ? new Color(.7f, .2f, .2f) : new Color(0f, .5f, 1f);
-        this.color = myGameRound < 2 ? new Color(.7f, .7f, 0) : new Color(0f, .8f, .5f);
+        _myString = rowColor;
+        switch (rowColor)
+        { 
+            case "BrickRed":
+                this.color = myGameRound < 2 ? new Color(.7f, .2f, .2f) : new Color(0f, .5f, 1f);
+                //sprite_renderer.color = this.color;
+                break;
+            case "BrickOrange":
+                this.color = myGameRound < 2 ? new Color(.8f, .5f, 0) : new Color(1f, .5f, 1f);
+                //sprite_renderer.color = this.color;
+                break;
+            case "BrickGreen":
+                this.color = myGameRound < 2 ? new Color(0f, .5f, 0f) : new Color(.8f, 0f, .8f);
+                //sprite_renderer.color = this.color;
+                break;
+            case "BrickYellow":
+                this.color = myGameRound < 2 ? new Color(.7f, .7f, 0) : new Color(0f, .8f, .5f);
+                //sprite_renderer.color = this.color;
+                break;
+        }
     }
-    */
+    
     
     public void Set_Row(int row)
     /*writes to brick object its position relative to other bricks vertically 0-7*/
@@ -49,6 +69,14 @@
         this.myCol = col;
     }
 
-    public abstract void OnCollisionEnter2D(Collision2D collision);
-    
+    public void OnCollisionEnter2D(Collision2D collision)
+    {
+        if (collision.gameObject.GetComponent<Ball>())
+        {
+            int myRowtemp = this.myRow;
+            int myColtemp = this.myCol;
+            Destroy(this.gameObject);
+            bi.BrickCollision(_myString, myRowtemp, myColtemp);
+        }
+    }
 }
\ No newline at end of file
